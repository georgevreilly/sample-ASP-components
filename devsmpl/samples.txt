                Multilingual Simple and Power Samples
                =====================================


Table of Contents
=================

    Overview
    Developing Components
    C++
    ATL
    MFC
    Java
    Visual Basic 4
    Visual Basic 5
    Installation
    Directory List
    Usage
    Sample ASP scripts
    Support
    Change Notes


Overview
========

Here, for your edification, are two Active Server Pages components,
each implemented in five different environments: C++/ATL (Microsoft
ActiveX Template Library), C++/MFC (Microsoft Foundation Classes),
J++ (Microsoft's Java), Microsoft Visual Basic 4, and Microsoft
Visual Basic 5.

The implementations are functionally equivalent.  Each implementation
should behave in exactly the same way.  Each implementation is written
in an idiomatic style to demonstrate the best way to implement the
component in that environment.

The Simple component has one method (myMethod) and one property
(myProperty), which can be both retrieved (get) and modified (set).
MyMethod converts a string to uppercase; myProperty is a string in the
object that can be get or set.  There is nothing ASP-specific about
the Simple component and, if desired, it could be used from any OLE
container.

The Power component is a superset of the Simple component.  In
addition to myMethod and myProperty, it has myPowerMethod and
myPowerProperty (gettable but not settable), which demonstrate some
ASP-specific features.  Two other standard but optional ASP methods
are also provided: OnStartPage and OnEndPage.  These methods bracket
the lifetime of a page.  OnStartPage is needed to gain access to the
intrinsic ASP objects: Request, Response, Server, Application, and
Session.

MyPowerMethod and myPowerProperty make use of the Request and Response
objects: Request to gain access to the ServerVariables collection and
thereby the ScriptName and the HttpUserAgent (user's browser)
variables; Response to write directly back to the user's browser.
MyPowerProperty returns the name of the ASP script from which it was
called.  MyPowerMethod writes a browser-dependent message back to the
user's browser; one for Microsoft Internet Explorer, a different one
for anything else.


Developing Components
=====================

You can develop ASP components in Visual C++, Visual J++, Visual
Basic, or any other language that builds ActiveX COM objects.

Note: ASP 1.0 does not unload components until it shuts down.  That
means that if you run a component through an ASP page, then make some
changes to the source, you will not be able to relink it successfully.
You must stop and restart the World Wide Web service.  You can do this
through the Internet Service Manager or by running
    net stop w3svc
    net start w3svc
at the command line or through a batch file.


C++
===

The C++ samples require Microsoft Visual C++ 4.2b or newer.  If you are using
VC 4.2, it is necessary that you upgrade to VC 4.2b, using the patch which
can be found at http://www.microsoft.com/visualc/patches/v4.2b/vc42b.htm
Note that this patch will not work with earlier or later versions of
Visual C++, only with VC 4.2.

If you get an error about "don't know how to make asptlb.h" for the
power samples, you will need to copy <InstallDir>\ASP\Cmpnts\AspTlb.h
to your include directory, \msdev\include.  On Windows NT, the default
installation directory is \winnt\System32\Inetsrv.  On Windows 95, it
is \Program Files\WebSvr\System.


ATL
===

The ATL samples also require ATL (Microsoft Active Template Library)
version 2.0 or newer.  ATL 2.1 ships with Visual C++ 5.0.  ATL 2.0 for
VC 4.2b can be downloaded from: http://www.microsoft.com/visualc/prodinfo/
You do not need the ATL Docs or Object Wizard Technology Preview to build
the registry access component, but you will probably find them useful.

ATL is the recommended library for writing ASP and other ActiveX
components in C++:
    * produces small, fast, industrial-strength components ("lean and mean")
    * supports all COM threading models (single, apartment, free)
    * supports IDispatch interfaces
    * dual interfaces are easy
    * supports the OLE error mechanism
    * methods are called very quickly
    * fine control over COM features ("closer to the metal")
    * many other features

For ATL 2.0, in order to add a method or a property to a component, it
is necessary to modify the .idl, .h, and .cpp files by hand.  With ATL 2.1,
the wizards in Visual C++ 5.0 automates much of this for you.

To create a new component with ATL 1.1:
    * Start a New Project Workspace in Developer Studio
    * Select ATL COM AppWizard
    * Enter the name and location of the project
    * Hit Create.
    * Accept the defaults and hit Finish.

Now that you've created the project, it's time to create a COM object
within the project.  In Visual C++ 4.2, go to the Insert menu of Developer
Studio and select Component....  The Component Gallery will appear.  A
number of tabs will appear at the bottom of the picture, such as Microsoft
and OLE Controls.  Scroll right until you see the ATL tab.  Double-click on
the ATL Object Wizard.

In Visual C++ 5.0, you can go to the Insert menu where you'll see New ATL
Object... or you can right-click on the classes in the ClassView pane,
where you'll also see New ATL Object....

When the ATL Object Wizard pops up, you'll see two panes.  In the left
pane, click on Objects.  In the right pane, double-click on Simple Object.
If you have VC 5.0, you'll see a number of additional objects; click on
ActiveX Server Component instead.

The ATL Object Wizard Properties dialog will appear.  On the Names tab,
type in the short name of your object.  The other names will be filled in
automatically.  You can edit them if you wish.  It's quite likely that
you'll want to edit the Prog ID.

On the Attributes tab, you may want to change the Threading Model to Both.
You probably don't need to support Aggregation.  You ought to Support
ISupportErrorInfo.  The other attributes should not need to be changed.

On the ASP tab (only present in VC 5), you can enable OnStartPage and
OnEndPage methods and select which of the ASP intrinsic objects you want to
use.

Note the use of the ATL wrapper classes CComBSTR, CComVariant,
CComPtr, and CComQIPtr in the ATL samples to simplify management of
COM data types.


MFC
===

MFC (Microsoft Foundation Classes) is included with Visual C++.

You might choose to write ASP components using MFC because:
    * MFC is already familiar to many C++ developers
    * leverage existing MFC code
    * provides a great deal of additional functionality
    * easy to use and easy to get up and running
    * supports most COM threading models (single, apartment, but not free)

To create a new object with MFC:
    * Start a New Project Workspace
    * Select MFC AppWizard (DLL)
    * Enter the name and location of the project
    * Select OLE Automation

When the project is created:
    * Bring up the Class Wizard and add a new class.  The base class
      should be CCmdTarget.  Check "Createable by type ID".  Uncheck
      "Add to Component Gallery".
    * Use the OLE Automation tab of the Class Wizard to add Methods
      and Properties.  Properties are probably best implemented with
      Get/Set methods.
    * If you want an OnStartPage method, it should return a long and
      take an LPDISPATCH parameter.  OnEndPage should also return a long.

If you use IScriptingContext and the other ASP interfaces, you
will need to #include <initguid.h> in _one_ of your .cpp files
before #includ'ing <asptlb.h>, or you will get linker errors.


Java
====

Please download the latest Java VM from http://www.microsoft.com/java
You should get the latest Java SDK from there too.

To create a Java component:
    * Start a New Project Workspace
    * Select Java Workspace
    * Enter the name and location of the project

When the project is created, use Insert|New Java Class to add your
class.  You can use the default settings for Extends, Package, and
Modifiers.

If you want to use IScriptingContext and the other ASP interfaces, you
must use Tools|Java Type Library Wizard and convert the Microsoft
Active Server Pages Object Library.  Put
    import com.ms.com.*;
    import asp.*;
at the top of your .java file.

Before you can use a Java component, MyClass, from ASP, you must 
    javareg /register /class:MyClass /progid:MyCompany.MyClass
    copy MyClass.class %SystemRoot%\Java\TrustLib
You need to run javareg only once, but you must copy MyClass.class
to TrustLib every time you recompile it.

Note that if you are testing the component in ASP and you change the
component, copy it to TrustLib, and reload the test page, that the new
object will not be used.  You must stop and restart the Web service,
as detailed above.

Note also that myPowerProperty in JavaPwr is not really a property in
the same way as it is in the other versions of the Power sample.
Properties must be public member _variables_, not functions.  It is a
serendipitous syntactical accident that it works and it only works
because it is a readonly "property".  It is impossible to implement a
non-trivial property unless it's readonly or writeonly.


Visual Basic 4
==============

These samples requires the Professional or Enterprise edition of Visual
Basic 4.0 (32-bit Edition).  Follow these steps to build a project:

1) Open the .vbp file in Visual Basic.
2) From the File menu, select 'Make OLE DLL File' and provide a dll name.

This procedure will build and register the sample component.


Visual Basic 5
==============

These samples requires Visual Basic 5.0.
Follow these steps to build a project:

1) Open the .vbp file in Visual Basic.
2) From the File menu, select 'Make XXX dll...' and provide a dll name.

This procedure will build and register the sample component.


Installation
============

To install these sample components, you must first compile them with
Microsoft Visual C++, Microsoft Visual J++, or Microsoft Visual Basic.
No binaries are supplied as these components are of interest only to
developers.  If you intend to run these components on a machine other
than the one on which they are compiled, you will need to copy the
DLLs to the target machine and
    regsvr32 /s /c SAMPLE.dll
(the samples will be registered automatically on the machine they're
built on).

If you have trouble registering components, you may be using the
wrong version of RegSvr32.exe.  Please use the version installed by
default in the directory <InstallDir>\ASP\Cmpnts.

For the Java .class files, you will need to run javareg and copy
the .class files to TrustLib, as described above.


Directory List
==============

Directory        Description
---------        -----------

 CATLSmpl        C++ ATL Simple Sample
 CATLPwr         C++ ATL Power Sample
 CMFCSmpl        C++ MFC Simple Sample
 CMFCPwr         C++ MFC Power Sample
 JavaSmpl        Java Simple Sample
 JavaPwr         Java Power Sample
 VB4Smpl         Visual Basic 4 Simple Sample
 VB4Pwr          Visual Basic 4 Power Sample
 VB5Smpl         Visual Basic 5 Simple Sample
 VB5Pwr          Visual Basic 5 Power Sample


Usage
=====

To use the samples, simply call Server.CreateObject("IISSample.XXX")
to create the object, where "XXX" is one of
    C++ATLSimple     C++ATLPower
    C++MFCSimple     C++MFCPower
    JavaSimple       JavaPower
    VB4Simple        VB4Power
    VB5Simple        VB5Power
Then you may access the object's methods and properties from your ASP
script.  Read any of the sample ASP scripts to discover how to use the
objects.


Sample ASP scripts
==================

You must copy the sample ASP scripts to a virtual directory (it need
not be a virtual root) on the IIS Server where you have installed the
sample components before they will work.


Support
=======

This component is not officially supported by Microsoft Corporation.
Peer support is available on the Active Server Pages mailing list or on
the microsoft.public.inetserver.iis.activeserverpages newsgroup.

To subscribe to the Active Server Pages mailing list, send mail to
listserv@listserv.msn.com with

subscribe Denali [firstname lastname]

in the body of the message, and then follow the directions carefully.
(firstname and lastname are optional.)

You can reach the newsgroup through msnews.microsoft.com and other NNTP
servers.


Change Notes
============

Beta 1: February 1997
---------------------

First release.


Beta 2: March 1997
------------------

* Fixed Developer Studio makefile problems in C++ components.
* Upgraded to build cleanly with ATL 2.0 (Visual C++ 4.2b) and ATL 2.0 (VC5).
* Better comments in Power components.

